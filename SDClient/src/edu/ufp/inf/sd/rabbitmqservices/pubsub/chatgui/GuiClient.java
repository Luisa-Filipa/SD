package edu.ufp.inf.sd.rabbitmqservices.pubsub.chatgui;

import edu.ufp.inf.sd.rabbitmqservices.pubsub.client.WorkerImpl;
import edu.ufp.inf.sd.rmi.server.HashSessionRI;

import javax.swing.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import static java.lang.Integer.parseInt;

public class GuiClient extends JFrame {

    private String[] args;

    private ArrayList<WorkerImpl> workers;

    private HashSessionRI hashSessionRI;

    private String username;

    private String credits;

    private boolean flag= false;

    private boolean pausedTaskGroup = false;

    public GuiClient(String[] args, HashSessionRI hashSessionRI) throws RemoteException {
        this.args=args;
        this.hashSessionRI=hashSessionRI;
        this.username = hashSessionRI.getUsername();
        this.credits = hashSessionRI.getCredits();
        this.workers = new ArrayList<>();
        initComponents();
    }

    public void updateCredits(String credits) {
        this.credits = credits;
        jLabelUserQntCredits.setText(this.credits);
    }

    /**
     * This method is called from within the constructor to initialize form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() throws RemoteException {

        jFileChooser1=new JFileChooser();

        jScrollPane1=new JScrollPane();

        jTextAreaChatHistory=new JTextArea();

        jButtonUpdate=new JButton();
        jButtonIsWorker=new JButton();

        jTextFieldMsg=new JTextField();

        jLabelUserID=new JLabel();
        jLabelUserName=new JLabel();

        jLabelUserCredits=new JLabel();
        jLabelUserQntCredits=new JLabel();
        jLabelWorker=new JLabel();

        jLabelDelete=new JLabel();
        jLabelDelete.setText("Delete TaskGroup");
        jTextFieldDelete = new JTextField();

        jMenuBar1=new JMenuBar();

        jMenu1=new JMenu();
        jMenuItemExit=new JMenuItem();
        jMenuItemSave=new JMenuItem();
        jMenuItemPauseTask=new JMenuItem();

        jMenu2=new JMenu();
        jMenuItemCopy=new JMenuItem();
        jMenuItemPaste=new JMenuItem();

        jMenu3 =new JMenu();
        jMenuItemDeleteTask=new JMenuItem();
        jMenuItemListTask=new JMenuItem();
        jMenuItemAddCredits=new JMenuItem();
        jMenuCriar = new JMenu();
        jMenuItemEstrategia1=new JMenuItem();
        jMenuItemEstrategia2=new JMenuItem();
        jMenuItemEstrategia3=new JMenuItem();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        jTextAreaChatHistory.setColumns(20);
        jTextAreaChatHistory.setLineWrap(true);
        jTextAreaChatHistory.setRows(5);
        jTextAreaChatHistory.setEnabled(false);

        jScrollPane1.setViewportView(jTextAreaChatHistory);

        jButtonIsWorker.setText("Work");
        jButtonIsWorker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIsWorkingActionPerformed(evt);
            }
        });

        jButtonUpdate.setText("Update");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jTextFieldMsg.setText("TaskID");

        jLabelUserID.setText("User ID:");
        jLabelUserName.setText(this.username);
        jLabelUserCredits.setText("Credits:");
        jLabelUserQntCredits.setText(this.credits);
        jLabelWorker.setText("No");

        /**
        * Criar o Menu da Task
        * Adicionar Um evento de ao carregar fazer qlq coisa
        */
        jMenu3.setText("Task");

        jMenuItemListTask.setText("Listar Task");
        jMenuItemListTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemListTaskActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemListTask);

        jMenuItemDeleteTask.setText("Delete Task");
        jMenuItemDeleteTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDeleteTaskActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemDeleteTask);

        jMenuItemPauseTask.setText("Pause Task");
        jMenuItemPauseTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPauseTaskActionPerformed(evt);
            }
        });

        jMenu3.add(jMenuItemPauseTask);

        jMenuItemAddCredits.setText("Add Credits");
        jMenuItemAddCredits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddCreditsTaskActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemAddCredits);

        /**
        * Criar o menu de criar a Task
        * Adicionar ao menu a Estratégia 1
        * Adicionar ao menu a Estratégia 2
        * Adicionar ao menu a Estratégia 3
        */
        jMenuCriar.setText("Criar Task");

        jMenuItemEstrategia1.setText("Est-1");
        jMenuItemEstrategia1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEst1ActionPerformed(evt);
            }
        });
        jMenuCriar.add(jMenuItemEstrategia1);

        /**
         * Criar os items do menu
         * Adicionar ao menu a Estratégia 2
         */
        jMenuItemEstrategia2.setText("Est-2");
        jMenuItemEstrategia2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEst2ActionPerformed(evt);
            }
        });
        jMenuCriar.add(jMenuItemEstrategia2);

        /**
         * Criar os items do menu
         * Adicionar ao menu a Estratégia 3
         */
        jMenuItemEstrategia3.setText("Est-3");
        jMenuItemEstrategia3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEst3ActionPerformed(evt);
            }
        });
        jMenuCriar.add(jMenuItemEstrategia3);

        /**
         * Adicionar o menu ao MenuBar
         */
        jMenu3.add(jMenuCriar);

        /**
        * Adicionar o menu ao MenuBar
        */
        jMenuBar1.add(jMenu3);

        /**
         * Criar o Menu File
         * Adicionar Um evento de ao carregar fazer qlq coisa
         */
        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        /**
         * Criar os items do menu
         * Adicionar ao menu o Exit
         */
        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    jMenuItemExitActionPerformed(evt);
                } catch (RemoteException e) {
                    e.printStackTrace();
                }
            }
        });
        jMenu1.add(jMenuItemExit);

        /**
         * Criar os items do menu
         * Adicionar ao menu o Save
         */
        jMenuItemSave.setText("Save");
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemSave);

        jMenu2.setText("Edit");

        jMenuItemCopy.setText("Copy");
        jMenuItemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCopyActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemCopy);

        jMenuItemPaste.setText("Paste");
        jMenuItemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPasteActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemPaste);

        jMenuBar1.add(jMenu1);
        jMenuBar1.add(jMenu2);
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        GroupLayout layout=new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabelUserID)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabelUserName, GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                                .addComponent(jLabelUserCredits)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabelUserQntCredits, GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                                        .addComponent(jTextFieldMsg, GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                                        .addComponent(jLabelWorker, GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                                        //.addComponent(jLabelDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabelDelete, GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                                        .addComponent(jTextFieldDelete)

                                )
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonUpdate)
                                .addComponent(jButtonIsWorker)
                        )
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 246, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextFieldMsg, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButtonUpdate)
                                        .addComponent(jLabelWorker, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButtonIsWorker)
                                )
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelDelete, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextFieldDelete)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)

                                        .addComponent(jLabelUserName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabelUserID)
                                        .addComponent(jLabelUserName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabelUserCredits)
                                        .addComponent(jLabelUserQntCredits, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }

    /*public void updateTextArea() {
        String msg="[" + this.observer.getReceivedMessage() + "] ";
        this.jTextAreaChatHistory.append(msg + '\n');
    }*/

    private void jMenuItemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCopyActionPerformed
        this.jTextAreaChatHistory.selectAll();
        this.jTextAreaChatHistory.copy();
    }

    private void jMenuItemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPasteActionPerformed
        this.jTextAreaChatHistory.paste();
    }

    private void jButtonIsWorkingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed
               try {
                   System.out.println("TaskID:"+this.jTextFieldMsg.getText());

                   WorkerImpl worker=null;
                   for (WorkerImpl w:workers) {
                       if (w.getWorkerAlgorithms()==null){
                           worker=w;
                           break;
                       }
                   }
                   if (worker==null){
                       worker = new WorkerImpl(String.valueOf(workers.size()+1), hashSessionRI, this);
                       workers.add(worker);
                   }
                   int credits = parseInt(this.credits)+1;
                   updateCredits(Integer.toString(credits));
                   String workQueueName = this.hashSessionRI.attach(this.username,worker,this.jTextFieldMsg.getText());
                   String[] aux={workQueueName};

                   if(workQueueName!=null){
                       worker.consume(aux);
                   }
               } catch (Exception e) {
                   e.printStackTrace();
               }
    }

    /**
     * Função que fecha as janelas
     * @param evt
     */
    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) throws RemoteException {
        hashSessionRI.logout();
        this.dispose();
        System.exit(0);
    }


    /**
     * Função para redirecionar para a função de criar a função pela estratégia 1
     * @param evt
     */
    private void jMenuItemEst1ActionPerformed(java.awt.event.ActionEvent evt) {
        GuiClientEst1.main(args, hashSessionRI,this);
    }

    private void jMenuItemListTaskActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            ArrayList<String> tasks = hashSessionRI.listTaskGroups();
            for (String s : tasks){
                String msg="[" +s+ "] ";
                this.jTextAreaChatHistory.append(msg + '\n'+'\n');
            }

        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    private void jMenuItemDeleteTaskActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            if (!jTextFieldDelete.getText().isEmpty()){
                this.hashSessionRI.deleteTaskGroup(jTextFieldDelete.getText());
            }else {
                JOptionPane.showMessageDialog(null, "Tem de preencher o campo relativo ao delete");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void updateTextArea (String text){
        this.jTextAreaChatHistory.append(text+'\n');
    }

    private void jMenuItemEst3ActionPerformed(java.awt.event.ActionEvent evt) {
        GuiClientEst3.main(args,hashSessionRI,this);
    }

    private void jMenuItemPauseTaskActionPerformed(java.awt.event.ActionEvent evt) {
        if (!jTextFieldDelete.getText().isEmpty()){
            this.flag= !this.flag;
            try {
                this.hashSessionRI.changeTaskGroupFlag(jTextFieldDelete.getText());
            } catch (RemoteException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Função para redirecionar para a função de criar a função pela estratégia 2
     * @param evt
     */
    private void jMenuItemEst2ActionPerformed(java.awt.event.ActionEvent evt){
        GuiClientEst2.main(args, hashSessionRI,this);
    }

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            updateCredits(hashSessionRI.getCredits());
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    private void jMenuItemAddCreditsTaskActionPerformed(java.awt.event.ActionEvent evt) {
        AdicionarCreditos.main(args,hashSessionRI);
    }

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {
    }

    /**
     * Função que guarda
     * @param evt
     */
    public void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {
        FileWriter fw=null;
        try {
            this.jFileChooser1=new JFileChooser(new File("C:\\Temp"));
            this.jFileChooser1.showSaveDialog(this);
            File f=this.jFileChooser1.getSelectedFile();
            if (f != null) {
                fw=new FileWriter(f);
                PrintWriter pw=new PrintWriter(fw);
                pw.println(this.jTextAreaChatHistory.getText());
            }
        } catch (IOException ex) {
            Logger.getLogger(GuiClient.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fw.close();
            } catch (IOException ex) {
                Logger.getLogger(GuiClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args, HashSessionRI hashSessionRI) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                if (args.length >= 0) {
                    System.out.println(args);
                    try {
                        new GuiClient(args,hashSessionRI).setVisible(true);
                    } catch (RemoteException e) {
                        e.printStackTrace();
                    }
                } else {
                    System.out.println(GuiClient.class + ": call must have the following args: <rmi_ip> <rmi_port> <rmi_service_prefix>");
                }
            }
        });
    }

    /**
     * Declaração das variáveis
     */
    private JButton jButtonUpdate;
    private JButton jButtonIsWorker;
    private JFileChooser jFileChooser1;
    private JLabel jLabelUserID;
    private JLabel jLabelUserName;
    private JLabel jLabelUserCredits;
    private JLabel jLabelUserQntCredits;
    private JLabel jLabelWorker;

    private JLabel jLabelDelete;
    private JTextField jTextFieldDelete;

    private JMenu jMenu1;
    private JMenuItem jMenuItemSave;
    private JMenuItem jMenuItemExit;

    private JMenu jMenu2;
    private JMenuItem jMenuItemCopy;
    private JMenuItem jMenuItemPaste;

    private JMenu jMenu3;
    private JMenu jMenuCriar;
    private JMenuItem jMenuItemEstrategia1;
    private JMenuItem jMenuItemEstrategia2;
    private JMenuItem jMenuItemEstrategia3;
    private JMenuItem jMenuItemDeleteTask;
    private JMenuItem jMenuItemListTask;
    private JMenuItem jMenuItemAddCredits;

    private JMenuItem jMenuItemPauseTask;

    private JMenuBar jMenuBar1;

    private JScrollPane jScrollPane1;
    private JTextArea jTextAreaChatHistory;
    private JTextField jTextFieldMsg;

}
